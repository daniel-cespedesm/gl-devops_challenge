---
- hosts: hygieia
  become: yes
  remote_user: ec2-user
  tasks:
    - name: Makes sure OS is up to date
      yum:  name=* state=latest
    - name: Docker dependencies and others
      yum: name={{ item }} state=latest
      with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - git
        - vim
        - java-1.8.0-openjdk-devel
    - name: Docker repo
      get_url: url=https://download.docker.com/linux/centos/docker-ce.repo dest=/etc/yum.repos.d/docker.repo force=yes
    - name: Makes sure Docker is at its latest RHEL compatible version
      command: yum install -y --setopt=obsoletes=0 docker-ce-17.03.1.ce-1.el7.centos.x86_64
      args:
        warn: no
    - name: Docker is started now and at boot.
      service: name=docker state=started enabled=yes
    - name: Removes docker repo
      file: path=/etc/yum.repos.d/docker.repo state=absent
    #- name: Download Kompose
    #  get_url:
    #    url: https://github.com/kubernetes/kompose/releases/download/v1.13.0/kompose-linux-amd64
    #    dest: /usr/local/bin/kompose
    #    mode: 0755
    - name: Adds mvn folder
      file: path=/usr/lib/mvn/ state=directory
    - name: Gets Maven installed
      unarchive:
        src: http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz
        dest: /usr/lib/mvn/
        remote_src: yes
    - name: Make mvn executable
      file:
        src: /usr/lib/mvn/apache-maven-3.5.3/bin/mvn
        dest: /usr/bin/mvn
        state: link
    - name: Make sure correct Java version selected
      alternatives:
        name: java
        link: /usr/bin/java
        path: /usr/lib/jvm/java-1.8.0/bin/java
    - name: Get Docker-Compose
      shell: "curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose"
    - name: Set permissions to docker-compose
      command: chmod +x /usr/local/bin/docker-compose
    - name: add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes
    - name: Docker is started now and at boot.
      service: name=docker state=started enabled=yes
    - name: Create jenkins_files and jenkins_home folders
      file: path=/home/ec2-user/{{ item }}/ state=directory
      with_items:
        - jenkins_files
        - jenkins_home
      become: no
    - name: Copy Jenkins conf files
      fetch: src=/root/gl-devops_challenge/terransible/jenkins_files/{{ item }} dest=/home/ec2-user/jenkins_files
      with_items:
        - hygieia-node.xml
        - hygieia-workflow.xml
      become: no
    - name: Wait for jenkins
      command: until $(curl --output /dev/null --silent --head --fail http://{{ jenkins_master }}:myport); do printf '.'; sleep 5s; done;
    - name: Create jar executables folder
      file: path=/home/ec2-user/bin/ state=directory
      become: no
    - name: Retrieve cli jar
      get_url:
        url: http://{{ jenkins_master }}:8081/jnlpJars/jenkins-cli.jar
        dest: /home/ec2-user/bin/jenkins-cli.jar
        mode: 0700
      become: no
    - name: Create Jenkins node
      command: cat config.xml | java -jar /home/ec2-user/bin/jenkins-cli.jar -s http://{{ jenkins_master }}:8081 create-node Hygieia-node --username gorilla --password GorillaLogic
    - name: Retrieve agent jar
      get_url:
        url: http://{{ jenkins_master }}:8081/jnlpJars/agent.jar
        dest: /home/ec2-user/bin/agent.jar
        mode: 0700
      become: no
    - name: Add Jenkins node
      command: java -jar /home/ec2-user/bin/agent.jar -jnlpUrl http://{{ jenkins_master }}:8081/computer/Hygieia-node/slave-agent.jnlp -jnlpCredentials gorilla:GorillaLogic &
      async: 99999999999
      poll: 0
      become: no
    - name: Create pipeline job
      command: java -jar /home/ec2-user/jenkins-cli.jar -s http://{{ jenkins_master }}:8081/ create-job jobtest --username gorilla --password GorillaLogic < jobtest.xml
      become: no
    - name: Build pipeline job
      command: java -jar /home/ec2-user/jenkins-cli.jar -s http://{{ jenkins_master }}:8081/ build jobtest --username gorilla --password GorillaLogic
      become: no
#> db.createUser({user:"dashboarduser",pwd:"mongo", roles:[{role:"readWrite", db:"dashboard"}]})
